<%# app/views/products/index.html.erb %>
<div class="container mx-auto px-4 py-8"> <%# Contenedor principal con padding y centrado %>
  <h1 class="text-3xl font-bold text-center mb-8">Nuestros Productos 10dencias</h1>

  <% if @products.any? %>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      <%# Tailwind CSS Grid:
           - grid: Activa CSS Grid.
           - grid-cols-1: 1 columna en pantallas pequeñas (móviles).
           - sm:grid-cols-2: 2 columnas en pantallas pequeñas (sm) y mayores.
           - md:grid-cols-3: 3 columnas en pantallas medianas (md) y mayores.
           - lg:grid-cols-4: 4 columnas en pantallas grandes (lg) y mayores.
           - gap-6: Espacio entre los elementos de la cuadrícula.
      %>
      <% @products.each do |product| %>
        <div class="bg-white rounded-lg shadow-lg overflow-hidden flex flex-col"> <%# Tarjeta de producto con Flexbox para alinear contenido interno %>
          <%# Imagen del Producto (Placeholder) %>
          <%# Deberás tener imágenes en app/assets/images/ o usar URLs completas %>
          <%# Por ahora, usamos un placeholder simple si la imagen no se encuentra o es un placeholder. %>
          <%= image_tag product.image_url, alt: product.name, class: "w-full h-48 object-cover" rescue image_tag "placeholder_product.png", class: "w-full h-48 object-cover" %>
          <%# 'rescue' es una forma simple de manejar errores si la imagen no existe.
              Crea un archivo 'placeholder_product.png' en 'app/assets/images/' para que esto funcione como fallback.
          %>

          <div class="p-4 flex-grow flex flex-col"> <%# Contenido de la tarjeta, flex-grow para que ocupe espacio disponible %>
            <h2 class="text-xl font-semibold mb-2"><%= link_to product.name, product_path(product), class: "hover:text-blue-600" %></h2>
            <p class="text-gray-700 text-sm mb-3 flex-grow"><%= product.description %></p> <%# flex-grow para que la descripción empuje el precio hacia abajo %>

            <div class="mt-auto"> <%# Contenedor para alinear precio y botón al final %>
              <p class="text-lg font-bold text-green-600 mb-3">$<%= number_to_currency(product.price, unit: "", separator: ",", delimiter: ".") %></p>
              <%# number_to_currency es un helper de Rails para formatear precios. Ajusta unit, separator, delimiter según necesites. %>
              <%# Por ahora, lo dejamos sencillo asumiendo que el precio es un número. %>
              <%# Si product.price ya está formateado o es un string, solo usa product.price %>

              <%# TODO: Aquí irá el botón/enlace para personalizar y añadir al carrito %>
              <button class="w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Personalizar
              </button>
            </div>
          </div>
        </div>
      <% end %>
    </div>
  <% else %>
    <p class="text-center text-gray-600">No hay productos disponibles en este momento. ¡Vuelve pronto!</p>
  <% end %>

  <%# Enlace temporal para ir al panel de admin (solo para desarrollo) %>
  <% if Rails.env.development? %>
    <div class="mt-12 text-center">
      <%= link_to "Panel de Administrador", admin_dashboard_path, class: "text-blue-500 hover:underline" %>
    </div>
  <% end %>
</div>